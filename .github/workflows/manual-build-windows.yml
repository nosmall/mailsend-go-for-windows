name: Ruční sestavení a vydání mailsend-go pro Windows

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Vytvořit nový GitHub Release? (true/false)'
        required: true
        default: 'false'
        type: boolean
      release_tag:
        description: 'Vlastní název tagu (např. v1.0.0). Nech prázdné pro automatické generování názvu z data commitu.'
        required: false # Změněno na false
        type: string

jobs:
  build-windows:
    name: Sestavit pro Windows
    runs-on: ubuntu-latest

    outputs:
      executable_name: mailsend-go-windows-amd64.exe

    steps:
      - name: Stažení kódu (Checkout)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Potřebné pro získání informací o commitech pro git log

      - name: Nastavení Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Kompilace pro Windows (amd64)
        id: build
        run: |
          EXECUTABLE_NAME="mailsend-go-windows-amd64.exe"
          echo "Kompiluji pro Windows amd64..."
          GOOS=windows GOARCH=amd64 go build -v -o $EXECUTABLE_NAME .
          echo "Kompilace dokončena. Výstupní soubor: $EXECUTABLE_NAME"
          echo "executable_name=$EXECUTABLE_NAME" >> $GITHUB_OUTPUT

      - name: Nahrání artefaktu (Windows amd64 .exe)
        uses: actions/upload-artifact@v4
        with:
          name: mailsend-go-windows-amd64-executable
          path: ${{ steps.build.outputs.executable_name || 'mailsend-go-windows-amd64.exe' }}

  create-release:
    name: Vytvořit GitHub Release
    needs: build-windows
    if: github.event.inputs.create_release == 'true' # Podmínka zůstává stejná
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Stažení kódu (Checkout)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Potřebné pro získání informací o commitech

      - name: Generování komponent pro název releasu
        id: generate_release_info
        run: |
          # Získá datum a čas posledního commitu v UTC a krátký hash
          # Formát: YYYYMMDD-HHMMSS
          COMMIT_DATETIME=$(git log -1 --format=%cd --date=format-local:'%Y%m%d-%H%M%S' --utc)
          SHORT_SHA=$(git log -1 --format=%h)
          
          # Pokud uživatel zadal vlastní tag, použijeme ho, jinak sestavíme automatický
          INPUT_TAG="${{ github.event.inputs.release_tag }}"
          if [ -z "$INPUT_TAG" ]; then
            FINAL_TAG_NAME="build-${COMMIT_DATETIME}-${SHORT_SHA}"
            FINAL_RELEASE_NAME="Automatický build ${COMMIT_DATETIME}-${SHORT_SHA}"
          else
            FINAL_TAG_NAME="$INPUT_TAG"
            FINAL_RELEASE_NAME="Release $INPUT_TAG (commit ${SHORT_SHA} z ${COMMIT_DATETIME})"
          fi
          
          echo "final_tag_name=${FINAL_TAG_NAME}" >> $GITHUB_OUTPUT
          echo "final_release_name=${FINAL_RELEASE_NAME}" >> $GITHUB_OUTPUT
          echo "commit_datetime_utc=${COMMIT_DATETIME}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "commit_message=$(git log -1 --pretty=%s)" >> $GITHUB_OUTPUT

      - name: Stažení skompilovaného artefaktu
        uses: actions/download-artifact@v4
        with:
          name: mailsend-go-windows-amd64-executable
          path: ./executable_dir

      - name: Vytvoření Release a nahrání souboru
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.generate_release_info.outputs.final_tag_name }}
          name: ${{ steps.generate_release_info.outputs.final_release_name }}
          body: |
            Toto je automaticky vygenerovaný release.
            Poslední commit: ${{ steps.generate_release_info.outputs.short_sha }} (${{ steps.generate_release_info.outputs.commit_message }})
            Datum commitu (UTC): ${{ steps.generate_release_info.outputs.commit_datetime_utc }}
            
            Skompilováno pro Windows (amd64).
          draft: false
          prerelease: false
          files: ./executable_dir/${{ needs.build-windows.outputs.executable_name }}
